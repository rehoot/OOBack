OOBack.py README file

Purpose:
1) This program will copy selected OpenOffice files of type .odt
   to an archive directory and unzip them and archive them with 
   git. This DOES NOT work on OpenOffice files with extensions
   other than .odt (I have not looked at other file types).
   This will also add some carriage returns inside the contents.xml
   file so that efficient git archiving is possible.
2) To recover a file that was unzipped using this program, 
   use the OORecov.py program.  It removes newlines if the line
   begins with "xmlns:"  "<text:" or "<style:" and the recover
   program should not harm files that do not have the extra line
   breaks.
3) To identify the files to archive, this program will read 
   a configuration file in ~/.OOBack.cfg to get a list
   of file specifications (with wildcards) to archive. The
   list does not look recursively into subdirectories.
   My configfile looks like this:

[defaults]
gitdir = /D/gits/OO

[archivefiles]
file1 = /Draft/*.odt

4) Assume that the user has already created a directory where 
   COPIES of OpenOffice files will be sent for archive,
   and assume that the user has run "git init" and some initial
   config commands:
	   git config −−global user.name YOUR-USERNAME
  	 git config --glocal user.email YOUREMAIL@YAHOO.COM
5) On the first run, the user will be prompted for the name of 
   the pre-existing archive directory and some path specifications
   (with optional wildcards) of OpenOffice files to archive 
   (like ~/Documents/MyNovel/*.odt).
   The current program does not support recursive file specification,
   so enter each directory separately.
6) After the first run, the ~/.OOBack.cfg config files is read
   to identify the files to archive

RECOVERY INSTRUCTIONS:
1) Use the OORecov.py program to recover one directory at a time:
      OORecov -f thedirectory

   It will create a new .odt file with a name that startes with "RECOV".

MANUAL RECOVERY INSTRUCTIONS
1) If you want to manuall restore a .odt file that was unzipped...
2) From the UNIX command line, change directory to be inside 
   the unzipped directory.
3) check the content.xml file to see if it has extra line breaks
   in front of text like this: "xmlns:"  "<text:" or "<style:"
   if so, remove those line breaks and save the file.
3) run a command like this:
      zip -r ../recovered.odt mimetype .
   which puts the "mimetype" file first in the zip file called ../recovered.odt
   and also zips all the other files in the directory.
4) to add (or replace) only the contents.xml file to an existing .odt file:
      zip ../existing.odt content.xml

